"""Tests related to hosts and network map"""

from sssd.testlib.common.qe_class import session_multihost
from sssd.testlib.common.utils import sssdTools
import pytest


def config_ssd(session_multihost, search_base, search_val):
    client = sssdTools(session_multihost.client[0])
    domain_params = {search_base: search_val}
    client.sssd_conf('domain/example1', domain_params)


@pytest.mark.hosts
class TestFun(object):
    """ """
    @pytest.mark.tier1
    def test_001_ldap_iphost_search_base(self,
                                         session_multihost,
                                         set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost, 'ldap_iphost_search_base',
                   'ou=People,dc=example,dc=test')
        ps_cmd = "getent hosts node1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.1' in cmd.stdout_text and \
                '192.168.1.2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'
        ps_cmd = "getent hosts 192.168.1.1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if 'node1' in cmd.stdout_text and 'node2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_002_ldap_iphost_object_class(self,
                                          session_multihost,
                                          set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost,
                   'ldap_iphost_object_class',
                   'ipHost')
        ps_cmd = "getent hosts node1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.1' in cmd.stdout_text and \
                '192.168.1.2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'
        ps_cmd = "getent hosts 192.168.1.1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if 'node1' in cmd.stdout_text and 'node2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_003_ldap_iphost_name(self,
                                  session_multihost,
                                  set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost, 'ldap_iphost_name', 'cn')
        ps_cmd = "getent hosts node1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.1' in cmd.stdout_text and \
                '192.168.1.2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'
        ps_cmd = "getent hosts 192.168.1.1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if 'node1' in cmd.stdout_text and 'node2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_004_ldap_iphost_number(self,
                                    session_multihost,
                                    set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost,
                   'ldap_iphost_number',
                   'ipHostNumber')
        ps_cmd = "getent hosts node1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.1' in cmd.stdout_text and \
                '192.168.1.2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'
        ps_cmd = "getent hosts 192.168.1.1"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if 'node1' in cmd.stdout_text and 'node2' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_005_ldap_ipnetwork_search_base(self,
                                            session_multihost,
                                            set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost,
                   'ldap_ipnetwork_search_base',
                   'ou=People,dc=example,dc=test')
        ps_cmd = "getent networks node2"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.2' in cmd.stdout_text and \
                '192.168.1.1' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_006_ldap_ipnetwork_object_class(self,
                                             session_multihost,
                                             set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost,
                   'ldap_ipnetwork_object_class',
                   'ipNetwork')
        ps_cmd = "getent networks node2"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.2' in cmd.stdout_text and \
                '192.168.1.1' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_007_ldap_ipnetwork_name(self,
                                     session_multihost,
                                     set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost, 'ldap_ipnetwork_name', 'cn')
        ps_cmd = "getent networks node2"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.2' in cmd.stdout_text and \
                '192.168.1.1' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_008_ldap_ipnetwork_number(self,
                                       session_multihost,
                                       set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost,
                   'ldap_ipnetwork_number',
                   'ipNetworkNumber')
        ps_cmd = "getent networks node2"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.2' in cmd.stdout_text and \
                '192.168.1.1' not in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'

    @pytest.mark.tier1
    def test_009_ipnetwork_iphost(self,
                                  session_multihost,
                                  set_up_network):
        """
        :Title: services: [RFE] SSSD NSS should support host map
        @bugzilla:
        https://bugzilla.redhat.com/show_bug.cgi?id=1340908
        """
        config_ssd(session_multihost,
                   'ldap_ipnetwork_search_base',
                   'ou=People,dc=example,dc=test')
        config_ssd(session_multihost,
                   'ldap_iphost_search_base',
                   'ou=People,dc=example,dc=test')
        ps_cmd = "getent networks node3"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if '192.168.1.3' in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'
        ps_cmd = "getent hosts 192.168.1.3"
        cmd = session_multihost.client[0].run_command(ps_cmd)
        if 'node3' in cmd.stdout_text:
            status = 'PASS'
        else:
            status = 'FAIL'
